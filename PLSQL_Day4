PL/SQL Day 4
Triggers
Triggers
Practice 1
• Implement the following business rule with the help of a trigger named
TR_CHECK_DEPT and a procedure named SECURE_DML. Changes to data in
the dept table, will be allowed only in the month of March.
• Create a procedure called SECURE_DML that prevents the DML statement
from executing in any other month than March. In case, a user tries to
modify the table in any other month, the procedure should display a message
“You can modify or add a department only at the end of a financial year”
• Create a statement level triggerTR_CHECK_DEPT on the dept table that calls
the above procedure.
• Test it by inserting a new record in the dept table.
ANS)---1
create or replace PROCEDURE SECURE_DML_16919 as
dates varchar(3);
BEGIN
select to_char(sysdate,'mm') into dates from dual;
if ( dates='03') then
raise_application_error(-20205,'You can modify or add a department only at the end
of a financial year');
end if;
END;
create or replace trigger TR_CHECK_DEPT_16919D
after insert or update on EMPLOYEE_ARPIT
begin
SECURE_DML_16919;
end;
insert into EMPLOYEE_ARPIT values(48,'dGHJcvFGG','LKhrDFGHNJJ');
Practice 2
• Enforce referential integrity with a trigger named TR_CASCADE_CHANGE.
When the value of DEPTNO changes in the Dept table, cascade the update to
the corresponding rows in the EMP table.
• Test it by updating the value of a deptno from the dept table.
ANS)
create or replace trigger TR_CASCADE_CHANGE_16919
after update on DEPARTMENT_MASTER_AKASH
FOR EACH ROW
DECLARE
TEMP_OLD VARCHAR2(5 BYTE):=:OLD.D_ID;
TEMP_NEW VARCHAR2(5 BYTE):=:NEW.D_ID;
begin
UPDATE CUST_MASTER_AKASH SET CUST_ID=TEMP_NEW WHERE
CUST_ID=TEMP_OLD;
end;
UPDATE DEPARTMENT_MASTER_AKASH SET D_ID='111' WHERE D_ID='101';

Practice 3
• Create a trigger named TR_CHECK_COMM to implement the following
business rule. In EMP table, employee having job as ‘Salesman’ should
receive a commission. A Salesman must receive a commission of not less
than Rs. 100. Employees who are not sales persons are not entitled to get
commission (comm value should be NULL).
• Test it by inserting a record in the emp table.
ANS)
create or replace trigger TR_CHECK_COMM_16919
before
insert or update on EMPLOYEE_ANSHIMA
for each row
when (NEW.E_JOB='Salesman')
begin
if :new.E_COMP<100 then
raise_application_error(-20205,'Commission should be greater than 100');
end if ;
end;
insert into EMPLOYEE_ANSHIMA(E_ID,E_NAME,E_JOB,E_COMP)
values(44,'ram','Salesman',10);
Practice 4
• While modifying the EMP table, ensure that the salary is in the valid range as
specified in the SALGRADE table (between lowest losal and highest hisal)
with the help of a trigger named TR_VALIDATE_SAL.
• Test it by updating the salary value of an existing record in the emp table.
ANS)
create or replace trigger tr_validate_sal_16919
before update on EMPLOYEE_VIPIN1
for each row
declare
max1 number;
min1 number;
begin
select max(end_sal),min(start_sal) into max1,min1 from SALARY_GRADE;
if :new.salary>max1 or :new.salary<min1 then
raise_application_error(-20205,'salary is not appropriate');
end if;
end;
update EMPLOYEE_VIPIN1 set salary=500 where NAME='Arun';
Practice5
• Create a table named salaryLog with the appropriate columns and insert the
empno, new grade, old salary and new salary values in salaryLog table if the
grade of an employee changes.
ANS)
create table SalaryLog_16919
(emp_no number,
new_grade varchar(10),
old_salary number,
new_salary number);
• Create a trigger named TR_CHECK_GRADE that will be fired when a user
modifies the EMP table. It will check whether the grade has changed by
making use of the SALGRADE table. (Grade is dependent on Salary.) If grade
is changed, the trigger will log the corresponding employee number, old
salary, new salary and new grade into salaryLog table.
• Test the working of the trigger by firing an appropriate DML query.
1/2
PL/SQL Day 4
ANS)
create or replace function Grade_16919(emp_sal number)
return varchar
as
emp_grade varchar(10);
begin
select grade into emp_grade from Salary_grade_16919;
where Lower_limit <= (emp_sal) and upper_limit > (emp_sal);
return emp_grade;
end;
create or replace trigger TR_CHECK_GRADE_16919
before update of salary on employee_vipin1
for each row
begin
if (Grade_sp(:old.salary) != Grade_sp(:new.salary))
then
insert into SalaryLog_sp values
(:old.id, Grade_sp(:new.salary), :old.salary, :new.salary);
end if;
end;
Mutating Table Error Workaround
Practice 6
• Create triggers named TR_RESTRICT_STRENGTH and
TR_LIMIT_ANALYSTS respectively, on emp table, to implement the
following business rules
a) There can not be more than 5 employees in department number 30
ANS)
Create
or replace function get_Dept_Count_16919(dept_no number)
return number
is
count_d number;
begin
select count(id) into count_d from employee_vipin1 where
deptno= dept_no;
return count_d;
end;
create or replace trigger TR_RESTRICT_STRENGTH_sp
before insert or update of deptno on employee_vipin1
for each row
begin
if(:new.deptno = 10) then
if(get_Dept_Count(:new.deptno) >= 5) then
raise_application_error(-20054,' There can not be more than 5 employees in
department number 10 ');
end if;
end if;
end;
insert into employee_vipin1 values(52,'Clerk',10,'18-JAN-01',100000,null,10,'DJ');
b) There can not be more than 4 ANALYSTS in the organization (There can
not be more than 4 records in the emp table with the job ANALYST)
• Fire appropriate DML queries to check the working of the triggers
ANS) create or replace function get_Job_Count(job_no varchar)
return number
is
count_d number;
begin
select count(id) into count_d from employee_vipin1 where
job= job_no;
return count_d;
end;
create or replace trigger TR_LIMIT_ANALYSTS_sp
before insert or update of job on employee_vipin1
for each row
begin
if(get_Job_Count('Analyst') > 3)
then raise_application_error(-20058, 'There can only be 4 analyst');
end if;
end;
insert into employee_vipin1 values
(60,'Analyst',10,'18-JAN-01',100000,null,21,'DJ');
2/2 
