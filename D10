package org.example;

import java.io.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ArrayList;

public class CustomerDataProcessor {
    // File path of the input CSV file
    private static final String CSV_FILE_PATH = "C:\\Users\\Rohitkumar.Singh\\Downloads\\JAVA_ASSIGNMENT\\Test_Input_1.txt";

    public static void main(String[] args) throws SQLException, IOException {
        ConnectionCreation cn=new ConnectionCreation();
        ArrayList<String> list = new ArrayList<String>();
        try {
            BufferedReader reader = new BufferedReader(new FileReader(CSV_FILE_PATH));
            String line = null;
            while ((line = reader.readLine()) != null) {
                String[] fields = line.split("~", line.length());
                for (int i = 0; i < fields.length; i++) {
                    list.add(fields[i]);
                    // System.out.print(st[i]+ " ; ");
                }
                boolean bool=Validate.PrimaryKeyValidation(list);
                if(bool==true)
                    cn.jdbcConnection(list);
                else{
                    System.out.println("There is an discrepencies in the data");
                    break;}
//                System.out.print(list);
//                System.out.println(list.size());
                list.clear();
            }
        } catch (Exception ex) {
            ex.getMessage();
        }
        finally {
            System.out.println("done with the execution");
        }
    }
}





Validation funtion class:

package org.example;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.text.ParseException;
import java.util.regex.Pattern;

public class Validate {

    public static <ArrayList> boolean PrimaryKeyValidation(java.util.ArrayList<String> list) throws IOException {
        java.util.ArrayList<String> pk = new java.util.ArrayList<String>();
        String regex1 = "^[a-zA-Z0-9_+&*-]+(?:\\." + "[a-zA-Z0-9_+&*-]+)*@" + "(?:[a-zA-Z0-9-]+\\.)+[a-z" + "A-Z]{2,7}$";
        Pattern pattern1 = Pattern.compile(regex1);
        String regex = "[a-zA-Z0-9]";
        Pattern pattern = Pattern.compile(regex);
        BufferedWriter bw = new BufferedWriter(new FileWriter("C:\\Users\\Rohitkumar.Singh\\Downloads\\JAVA_ASSIGNMENT\\Error_Report.txt"));
        System.out.println(list + "Validate");
        if (!(list.get(0) == null || pk.contains(list.get(0))) || (list.get(0).length()) >= 10) {
            pk.add(list.get(0));
            String CustName = list.get(1);
            Matcher matcher = pattern.matcher(CustName);
            if (!((list.get(1) == null || matcher.matches() == true) || (list.get(1).length()) > 30)) {
                if (!(list.get(2) == null || (list.get(2).length() <= 100))) {
                    if (!(list.get(3).length() <= 100)) {
                        if (!(list.get(4) == null || (list.get(4).length() == 6))) {
                            String email = list.get(5);
                            Matcher matcher1 = pattern.matcher(email);
                            if (!(email == null || matcher.matches() == true || email.length() >= 100)) {
                                if (!(list.get(6).length() > 20)) {
                                    if (!(list.get(7).length() > 100)) {
                                        if (list.get(8).length() == 1 || list.get(8) != null || list.get(8).equals('N') || list.get(8).equals('M') || list.get(8).equals('A') || list.get(8).equals('R') || list.get(8).equals('D')) {
                                            if (list.get(9).length() == 1 || list.get(9) != null || list.get(9).equals('A') || list.get(9).equals('I')) {
                                                if (list.get(10) != null) {
                                                    if (list.get(11) != null || list.get(11).length() <= 30) {
                                                        if (list.get(13).length() <= 30) {
                                                            if (list.get(15).length() <= 30) {
                                                                return true;
                                                            } else{
                                                                bw.write("Authorized By field fails validation");
                                                            return false;}
                                                        } else{
                                                            bw.write(" Modified By fails validation");
                                                        return false;}
                                                    } else{
                                                        bw.write("Created By field fails validation ");
                                                    return false;}
                                                } else{
                                                    bw.write("Created Date field fails validation");
                                                return false;}
                                            } else{
                                                bw.write("Active/Inactive Flag fails validation ");
                                            return false;}
                                        } else{
                                            bw.write("Record Status fails validation ");
                                        return false;}
                                    } else{
                                        bw.write("Primary Contact person fails validation");
                                    return false;}
                                } else{
                                    bw.write("Contact NUmber fails validation");
                                return false;}
                            } else{
                                bw.write("E-mail address fails validation");
                            return false;}
                        } else{
                            bw.write("Customer Pin Code fails validation");
                        return false;}
                    } else{
                        bw.write("Customer Address 2 fails validation");
                    return false;}
                } else{
                    bw.write("Customer Address 1 fails validation");
                return false;}
            } else{
                bw.write("Customer Name fails validation");
            return false;}
        } else{
            bw.write("Customer Code fails validation");
        return false;}
    }
}




jdbc connectioh creation class: 
package org.example;
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

public class ConnectionCreation {

    void jdbcConnection(java.util.ArrayList<String> list) throws ParseException {
        String url = "oracle.jdbc.driver.OracleDriver";
        String user = "sh";
        String password = "sh";
        String sql = "INSERT INTO Customer_Master_Table_Rohit (CUSTOMER_CODE, CUSTOMER_NAME, CUSTOMER_ADDRESS_1, CUSTOMER_ADDRESS_2, CUSTOMER_PIN_CODE,EMAIL_ADDRESS,CONTACT,PRIMARY_CONTACT_PERSON,RECORD_STATUS,ACTIVE_INACTIVE_FLAG,CREATE_DATE,CREATED_BY,MODIFIED_DATE,MODIFIED_BY,AUTHORIZED_DATE,AUTHORIZED_BY) VALUES (?, ?, ?, ?, ?,?, ?, ?, ?, ?,?, ?, ?, ?, ?,?)";
        ArrayList<String> list1 = list;
        System.out.println(list1 + "Connection");
        try (Connection conn = DriverManager.getConnection(url, user, password);
             PreparedStatement stmt = conn.prepareStatement(sql)) {

            for (String str : list1) {
                stmt.setInt(1, Integer.parseInt(list1.get(0)));
                stmt.setString(2, list1.get(1));
                stmt.setString(3, list1.get(2));
                stmt.setString(4, list1.get(3));
                stmt.setString(5, list1.get(4));
                stmt.setInt(6, Integer.parseInt(list1.get(5)));
                stmt.setString(7, list1.get(6));
                stmt.setInt(8, Integer.parseInt(list1.get(7)));
                stmt.setString(9, list1.get(8));
                stmt.setString(10, list1.get(9));
                stmt.setString(11, list1.get(10));
                stmt.setDate(12, (Date) new SimpleDateFormat().parse(list1.get(11)));
                stmt.setString(13, list1.get(12));
                stmt.setDate(14, (Date) new SimpleDateFormat().parse(list1.get(13)));
                stmt.setString(15, list1.get(14));
                stmt.setDate(16, (Date) new SimpleDateFormat().parse(list1.get(15)));
                stmt.setString(17, list1.get(16));
                int j = stmt.executeUpdate();
                System.out.println(++j + " records inserted");
                System.out.println();

            }

            int[] updateCounts = stmt.executeBatch();
            System.out.println("Rows inserted: " + updateCounts.length);

        } catch (SQLException e) {
            System.out.println("SQL Exception: " + e.getMessage());
        }
    }
}

