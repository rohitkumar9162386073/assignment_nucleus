MAIN FILE:

Main Class:

package BRD_Final;


import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;

public class BRDFinalMain {
    public static void main(String[] args) throws SQLException, IOException, ParseException {
        final String CSV_FILE_PATH = "C:\\Users\\Rohitkumar.Singh\\Downloads\\JAVA_ASSIGNMENT\\Test_Input_1.txt";
      //  System.out.println("alpha1");
        try {
           // System.out.println("alpha2");
            BufferedReader reader = new BufferedReader(new FileReader(CSV_FILE_PATH));
            String line = null;
            ArrayList<String> list=new ArrayList<>();
            int index = 1;
            DaoCustomerDetails dcd=new DaoCustomerDetails();
            //dcd.conn();
            while ((line = reader.readLine()) != null) {
              //  System.out.println("alpha3");
                String[] fields = line.split("~", line.length());
//                System.out.println(fields.length);
//                String s1=fields[14];
//                String s2=fields[15];
//                System.out.println(s1+" : "+s2);
                for(int i=0;i<fields.length;i++)
               list.add(fields[i]);
                System.out.println(list);

                Customer_details cd = new Customer_details(index++,list.get(0), list.get(1), list.get(2),
                        list.get(3), Long.parseLong(list.get(4)), list.get(5), Long.parseLong(list.get(6)), list.get(7), list.get(8), list.get(9),
                        list.get(10), list.get(11),list.get(12), list.get(13),
                        list.get(14), list.get(15));
                //System.out.println("alpha4");
                //System.out.println(cd.getAuthorizedDate());
                //System.out.println("alpha");

                boolean rst=Validation.ValidationFunction(list);
                list.clear();
                if (rst==true){
                dcd.save(cd);
                System.out.println("1 Record Inserted");}
                else{
                    System.out.println("Validation Failed");
                }
            }
            reader.close();
        } catch (Exception e) {
            e.getMessage();
        }

    }
}




Customer DETAILS FILE:


package BRD_Final;

import java.util.Date;

public class Customer_details {
    private int CustomerID;//1
    private String CustomerCode;//2
    private String CustomerName;//3
    private String CustomerAddress1;//4
    private String CustomerAddress2;//5
    private long CustomerPinCode;//6
    private String Emailaddress;//7
    private long ContactNumber;//8
    private String PrimaryContactPerson;//9
    private String RecordStatus;//10
    private String ActiveInactiveFlag;//11
    private String CreateDate;//12
    private String CreatedBy;//13
    private String ModifiedDate;//14
    private String ModifiedBy;//15
    private String AuthorizedDate;//16
    private String AuthorizedBy;//17


    public int getCustomerID() {
        return CustomerID;
    }

    public void setCustomerID(int customerID) {
        CustomerID = customerID;
    }

    public String getCustomerCode() {
        return CustomerCode;
    }

    public void setCustomerCode(String customerCode) {
        CustomerCode = customerCode;
    }

    public String getCustomerName() {
        return CustomerName;
    }

    public void setCustomerName(String customerName) {
        CustomerName = customerName;
    }

    public String getCustomerAddress1() {
        return CustomerAddress1;
    }

    public void setCustomerAddress1(String customerAddress1) {
        CustomerAddress1 = customerAddress1;
    }

    public String getCustomerAddress2() {
        return CustomerAddress2;
    }

    public void setCustomerAddress2(String customerAddress2) {
        CustomerAddress2 = customerAddress2;
    }

    public long getCustomerPinCode() {
        return CustomerPinCode;
    }

    public void setCustomerPinCode(long customerPinCode) {
        CustomerPinCode = customerPinCode;
    }

    public String getEmailaddress() {
        return Emailaddress;
    }

    public void setEmailaddress(String emailaddress) {
        Emailaddress = emailaddress;
    }

    public long getContactNumber() {
        return ContactNumber;
    }

    public void setContactNumber(long contactNumber) {
        ContactNumber = contactNumber;
    }

    public String getPrimaryContactPerson() {
        return PrimaryContactPerson;
    }

    public void setPrimaryContactPerson(String primaryContactPerson) {
        PrimaryContactPerson = primaryContactPerson;
    }

    public String getRecordStatus() {
        return RecordStatus;
    }

    public void setRecordStatus(String recordStatus) {
        RecordStatus = recordStatus;
    }

    public String getActiveInactiveFlag() {
        return ActiveInactiveFlag;
    }

    public void setActiveInactiveFlag(String activeInactiveFlag) {
        ActiveInactiveFlag = activeInactiveFlag;
    }

    public String getCreateDate() {
        return CreateDate;
    }

    public void setCreateDate(String createDate) {
        CreateDate = createDate;
    }

    public String getCreatedBy() {
        return CreatedBy;
    }

    public void setCreatedBy(String createdBy) {
        CreatedBy = createdBy;
    }

    public String getModifiedDate() {
        return ModifiedDate;
    }

    public void setModifiedDate(String modifiedDate) {
        ModifiedDate = modifiedDate;
    }

    public String getModifiedBy() {
        return ModifiedBy;
    }

    public void setModifiedBy(String modifiedBy) {
        ModifiedBy = modifiedBy;
    }

    public String getAuthorizedDate() {
        return AuthorizedDate;
    }

    public void setAuthorizedDate(String authorizedDate) {
        AuthorizedDate = authorizedDate;
    }

    public String getAuthorizedBy() {
        return AuthorizedBy;
    }

    public void setAuthorizedBy(String authorizedBy) {
        AuthorizedBy = authorizedBy;
    }

    public String toString() {
        return "Employee_details [CustomerID=" + CustomerID + "CustomerCode=" + CustomerCode +
                ", CustomerName=" + CustomerName + ", CustomerAddress1="
                + CustomerAddress1 + "CustomerAddress2=" + CustomerAddress1 +
                "CustomerPinCode=" + CustomerPinCode + "Emailaddress=" +
                Emailaddress + "ContactNumber=" + ContactNumber + "PrimaryContactPerson="
                + PrimaryContactPerson + " RecordStatus=" + RecordStatus + "ActiveInactiveFlag=" +
                ActiveInactiveFlag + "CreateDate=" + CreateDate + "CreatedBy=" + CreatedBy
                + "ModifiedDate=" + ModifiedDate + "ModifiedBy=" + ModifiedBy + "AuthorizedDate=" +
                AuthorizedDate + "AuthorizedBy=" + AuthorizedBy + "]";
    }

    public Customer_details(int CustomerID, String CustomerCode, String CustomerName,
                            String CustomerAddress1, String CustomerAddress2, long CustomerPinCode,
                            String Emailaddress, long ContactNumber, String PrimaryContactPerson,
                            String RecordStatus, String ActiveInactiveFlag, String CreateDate, String CreatedBy,
                            String ModifiedDate, String ModifiedBy, String AuthorizedDate, String AuthorizedBy) {
        this.CustomerID = CustomerID;
        this.CustomerCode = CustomerCode;
        this.CustomerName = CustomerName;
        this.CustomerAddress1 = CustomerAddress1;
        this.CustomerAddress2 = CustomerAddress2;
        this.CustomerPinCode = CustomerPinCode;
        this.Emailaddress = Emailaddress;
        this.ContactNumber = ContactNumber;
        this.PrimaryContactPerson = PrimaryContactPerson;
        this.RecordStatus = RecordStatus;
        this.ActiveInactiveFlag = ActiveInactiveFlag;
        this.CreateDate = CreateDate;
        this.CreatedBy = CreatedBy;
        this.AuthorizedDate = AuthorizedDate;
        this.AuthorizedBy = AuthorizedBy;
        this.ModifiedDate = ModifiedDate;
        this.ModifiedBy = ModifiedBy;
    }
}


DAOCustomerDetails FILE:

package BRD_Final;

import java.sql.*;

public class DaoCustomerDetails {

    static int index = 1;
    Connection con = null;
    Statement stmt=null;

    public DaoCustomerDetails() {
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            this.con = DriverManager.getConnection(
                    "jdbc:oracle:thin:@10.1.50.198:1535/nsbt19c", "sh", "sh");
            this.stmt = con.createStatement();
        } catch (Exception e) {
        }
    }
//    public void conn() {
//        try {
//            Class.forName("oracle.jdbc.driver.OracleDriver");
//            con = DriverManager.getConnection(
//                    "jdbc:oracle:thin:@10.1.50.198:1535/nsbt19c", "sh", "sh");
//            stmt = con.createStatement();
//        } catch (Exception e) {
//        }
//    }

    public void save(Customer_details e) {

        try {

            String s = "insert into Customer_Master_Table_Rohit values(" + e.getCustomerID() + ",'"
                    + e.getCustomerCode() + "','" + e.getCustomerName()+"','"+ e.getCustomerAddress1() + "','"
                    + e.getCustomerAddress2() + "'," + e.getCustomerPinCode()+ ",'" +e.getEmailaddress() + "',"
                    + e.getContactNumber() + ",'" + e.getPrimaryContactPerson()+ "','" + e.getRecordStatus() + "','"
                    + e.getActiveInactiveFlag() + "','" + e.getCreateDate()+"','" + e.getCreatedBy() + "','"
                    + e.getModifiedDate() + "','" + e.getModifiedBy()+"','"+ e.getAuthorizedDate()+"','" +
                    e.getAuthorizedBy()+"')";
            System.out.println(index);
             this.stmt.execute(s);
             index++;
        } catch (SQLException e1) {
            e1.getMessage();
        }
    }
}



Validation Function File:
package BRD_Final;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Validation {
    public static boolean ValidationFunction(ArrayList<String> list) throws IOException {
       FileWriter file=new FileWriter("C:\\Users\\Rohitkumar.Singh\\Downloads\\JAVA_ASSIGNMENT\\Error_Report.txt");
       int n=list.size();
        return Validation.Validation1(list,file);
    }

    public static <ArrayList> boolean Validation1(java.util.ArrayList<String> list, FileWriter bw1) throws IOException {
        java.util.ArrayList<String> pk = new java.util.ArrayList<String>();
        String regex = "[a-zA-Z0-9]";
        Pattern pattern = Pattern.compile(regex);
        System.out.println(list + "Validate");
        if (!(list.get(0) == null || pk.contains(list.get(0))) || (list.get(0).length()) > 10) {
            System.out.println("1st test");
            pk.add(list.get(0));
            String CustName = list.get(1);
            Matcher matcher = pattern.matcher(CustName);
            if (!((list.get(1) == null || matcher.matches() || (list.get(1).length()) > 30))){
                System.out.println("2nd Test");
                return  Validation.Validation2(list,bw1);}
            else
            {
                bw1.write("Customer Name fails validation");
                bw1.close();
                return false;
            }
        } else {
            bw1.write("Customer Code fails validation");
            bw1.close();
            return false;
        }
    }

    public static <Arraylist> boolean Validation2(java.util.ArrayList<String> list,FileWriter bw2) throws IOException {
        if (!(list.get(2) == null || (list.get(2).length() > 100))) {
            System.out.println("3rd  Test");
        if (!(list.get(3).length() > 100)){
            System.out.println("4th  Test");
            return Validation.Validation3(list,bw2);}
            else{
            bw2.write("Customer Address 2 fails validation");
            bw2.close();
            return false;
        }
        } else{
            System.out.println("Check");
            bw2.write("Customer Address 1 fails validation");
            bw2.close();
            return false;
        }
    }

    public static <Arraylist> boolean Validation3(java.util.ArrayList<String> list,FileWriter bw3) throws IOException {
        if (!(list.get(4) == null || (list.get(4).length() != 6))) {
            String email = list.get(5);
            String regex1 = "\"[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,6}$\", Pattern.CASE_INSENSITIVE";
            Pattern pattern1 = Pattern.compile(regex1);
            Matcher matcher1 = pattern1.matcher(email);
            System.out.println("5th  Test");
            if (!(email == null || matcher1.matches() == true || email.length() > 100)){
                System.out.println("6th Test");
                return Validation4 (list,bw3);}
                else{
                bw3.write("E-mail address fails validation");
                return false;
            }
        } else {
            bw3.write("Customer Pin Code fails validation");
            bw3.close();
            return false;
        }
    }

    public static <ArrayList> boolean Validation4(java.util.ArrayList<String> list,FileWriter bw4) throws IOException {
        if (!(list.get(6).length() > 20)) {
            System.out.println("9th Test");
            if (!(list.get(7).length() > 100)){
                System.out.println("8th Test");
                return Validation5 (list, bw4);}
            else{
                bw4.write("Primary Contact person fails validation");
                bw4.close();
                return false;
            }
        } else {
            bw4.write("Contact NUmber fails validation");
            bw4.close();
            return false;
        }
    }

    public static <ArrayList> boolean Validation5(java.util.ArrayList<String> list,FileWriter bw5) throws IOException {
        if (list.get(8).length() == 1 || list.get(8) != null || list.get(8).equals('N') || list.get(8).equals('M') || list.get(8).equals('A') || list.get(8).equals('R') || list.get(8).equals('D')) {
            System.out.println("10th Test");
            if (list.get(9).length() == 1 || list.get(9) != null || list.get(9).equals('A') || list.get(9).equals('I')){
                System.out.println("11th Test");
                return Validation6 (list,bw5);}
                else{
                bw5.write("Active/Inactive Flag fails validation ");
                bw5.close();
                return false;
            }
        } else {
            bw5.write("Record Status fails validation ");
            bw5.close();
            return false;
        }
    }

    public static <Arraylist> boolean Validation6(java.util.ArrayList<String> list,FileWriter bw6) throws IOException {
        if (list.get(10) != null) {
            System.out.println("12th Test");
            if (list.get(11) != null || list.get(11).length() <= 30) {
                System.out.println("13th Test");
                if (list.get(13).length() <= 30){
                    System.out.println("14th Test");
                    return Validation7 (list,bw6);}
                else{
                    bw6.write(" Modified By fails validation");
                    bw6.close();
                    return false;
                }
            } else {
                bw6.write("Created By field fails validation ");
                bw6.close();
                return false;
            }
        } else {
            bw6.write("Created Date field fails validation");
            bw6.close();
            return false;
        }
    }

    public static <Arraylist> boolean Validation7(java.util.ArrayList<String> list, FileWriter bw7) throws IOException {
        if (list.get(15).length() <= 30) {
            System.out.println("15th Test");
            return true;
        } else {
            bw7.write("Authorized By field fails validation");
            bw7.close();
            return false;
        }
    }
}





Correction code for storing 1600 fields into a single ho in 100 records of 16 fields each:





import java.util.ArrayList;
import java.util.List;

public class StringFieldsConverter {

    public static void main(String[] args) {
        
        // Assuming that the ArrayList containing the 1600 string fields is named 'stringFields'
        List<String> stringFields = new ArrayList<>();
        // ... add 1600 string fields to the ArrayList
        
        // Convert 1600 string fields into 100 records of 16 fields each
        List<String[]> records = new ArrayList<>();
        for (int i = 0; i < stringFields.size(); i += 16) {
            String[] record = new String[16];
            for (int j = 0; j < 16; j++) {
                record[j] = stringFields.get(i + j);
            }
            records.add(record);
        }
        
        // Print the resulting records
        for (String[] record : records) {
            for (String field : record) {
                System.out.print(field + ", ");
            }
            System.out.println();
        }
    }
}

