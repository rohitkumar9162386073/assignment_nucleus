import java.util.ArrayList;
import java.util.List;

public class Customer {
    private String name;
    private String email;
    private double annualIncome;

    public Customer(String name, String email, double annualIncome) {
        this.name = name;
        this.email = email;
        this.annualIncome = annualIncome;
    }

    public String getName() {
        return name;
    }

    public String getEmail() {
        return email;
    }

    public double getAnnualIncome() {
        return annualIncome;
    }

    public double getMonthlyIncome() {
        return annualIncome / 12;
    }

    public static void main(String[] args) {
        // create an array of customer objects
        Customer[] customers = {
                new Customer("John", "john@gmail.com", 600000),
                new Customer("Jane", "jane@gmail.com", 400000),
                new Customer("Bob", "bob@gmail.com", 800000),
                new Customer("Alice", "alice@gmail.com", 550000)
        };

        // create a custom functional interface to filter customers based on monthly income
        interface IncomeFilter {
            boolean test(Customer customer);
        }

        // use the custom functional interface to filter customers
        IncomeFilter filter = customer -> customer.getMonthlyIncome() > 50000;

        List<Customer> filteredCustomers = new ArrayList<>();
        for (Customer customer : customers) {
            if (filter.test(customer)) {
                filteredCustomers.add(customer);
            }
        }

        // print the filtered customers
        for (Customer customer : filteredCustomers) {
            System.out.println(customer.getName() + " - " + customer.getEmail() + " - " + customer.getAnnualIncome());
        }
        
        
        
        
        
        
        
        
        
        
        import java.util.function.Predicate;

public class Customer {

    private String name;

    private int age;

    private double monthlyIncome;

    public Customer(String name, int age, double monthlyIncome) {

        this.name = name;

        this.age = age;

        this.monthlyIncome = monthlyIncome;

    }

    public String getName() {

        return name;

    }

    public int getAge() {

        return age;

    }

    public double getMonthlyIncome() {

        return monthlyIncome;

    }

    public static void main(String[] args) {

        // Create an array of customer objects

        Customer[] customers = {

                new Customer("John", 35, 700000),

                new Customer("Jane", 28, 450000),

                new Customer("Bob", 42, 800000),

                new Customer("Alice", 30, 550000),

                new Customer("Tom", 25, 350000)

        };

        // Define a predicate to filter customers by monthly income

        Predicate<Customer> incomePredicate = customer -> customer.getMonthlyIncome() > 500000;

        // Print the names of customers whose monthly income is greater than 5 lakhs

        for (Customer customer : customers) {

            if (incomePredicate.test(customer)) {

                System.out.println(customer.getName());

            }

        }

    }











import java.util.ArrayList;

import java.util.List;

import java.util.function.Predicate;

interface CustomerFilter {

    boolean filter(Customer c);

}

public class Customer {

    private String name;

    private int age;

    private double monthlyIncome;

    public Customer(String name, int age, double monthlyIncome) {

        this.name = name;

        this.age = age;

        this.monthlyIncome = monthlyIncome;

    }

    public String getName() {

        return name;

    }

    public int getAge() {

        return age;

    }

    public double getMonthlyIncome() {

        return monthlyIncome;

    }

    public static void main(String[] args) {

        // Create a list of customer objects

        List<Customer> customers = new ArrayList<>();

        customers.add(new Customer("John", 35, 700000));

        customers.add(new Customer("Jane", 28, 450000));

        customers.add(new Customer("Bob", 22, 800000));

        customers.add(new Customer("Alice", 20, 550000));

        customers.add(new Customer("Tom", 25, 350000));

        // Define a predicate to filter customers by age range

        CustomerFilter ageRangeFilter = c -> c.getAge() >= 18 && c.getAge() <= 25;

        // Print the names of customers whose age is in the range of 18 to 25

        for (Customer customer : customers) {

            if (ageRangeFilter.filter(customer)) {

                System.out.println(customer.getName());

            }

        }

    }

}

