[16/02, 17:06] Kr.rohit: import java.util.Arrays;

import java.util.List;

import java.util.stream.Collectors;

public class Main {

    public static void main(String[] args) {

        List<Integer> listWithDuplicates = Arrays.asList(1, 2, 3, 1, 2, 4, 5, 6, 5);

        List<Integer> listWithoutDuplicates = listWithDuplicates.stream()

                .distinct()

                .collect(Collectors.toList());

        System.out.println("List with duplicates: " + listWithDuplicates);

        System.out.println("List without duplicates: " + listWithoutDuplicates);

    }

}

[16/02, 17:09] Kr.rohit: import java.util.ArrayList;

import java.util.List;

public class SumOfListUsingStream {

    public static void main(String[] args) {

        List<Integer> numbers = new ArrayList<>();

        numbers.add(1);

        numbers.add(2);

        numbers.add(3);

        numbers.add(4);

        numbers.add(5);

        int sum = numbers.stream().mapToInt(Integer::intValue).sum();

        System.out.println("Sum of all numbers in the list: " + sum);

    }

}

[16/02, 17:11] Kr.rohit: import java.util.ArrayList;

import java.util.List;

public class CubeAndFilterUsingStream {

    public static void main(String[] args) {

        List<Integer> numbers = new ArrayList<>();

        numbers.add(2);

        numbers.add(5);

        numbers.add(7);

        numbers.add(9);

        numbers.add(10);

        numbers.add(12);

        List<Integer> filteredNumbers = numbers.stream()

                .map(n -> n * n * n)    // cube each number

                .filter(n -> n > 50)   // filter out numbers greater than 50

                .toList();

        System.out.println("Filtered numbers greater than 50 after performing cube: " + filteredNumbers);

    }

}

[16/02, 17:13] Kr.rohit: import java.util.ArrayList;

import java.util.List;

public class FilterStringUsingStream {

    public static void main(String[] args) {

        List<String> strings = new ArrayList<>();

        strings.add("hello");

        strings.add("world");

        strings.add("this");

        strings.add("is");

        strings.add("a");

        strings.add("test");

        strings.add("string");

        strings.stream()

               .filter(s -> s.length() > 5)   // filter out strings with length less than or equal to 5

               .forEach(System.out::println); // print the remaining strings

    }

}

[16/02, 17:17] Kr.rohit: import java.util.ArrayList;

import java.util.List;

public class CountStringUsingStream {

    public static void main(String[] args) {

        List<String> strings = new ArrayList<>();

        strings.add("hello");

        strings.add("world");

        strings.add("this");

        strings.add("is");

        strings.add("a");

        strings.add("test");

        strings.add("string");

        long count = strings.stream()

                            .filter(s -> s.length() > 5)   // filter out strings with length less than or equal to 5

                            .count();                       // count the remaining strings

        System.out.println("Number of strings whose length is greater than 5: " + count);

    }

}

[16/02, 17:18] Kr.rohit: import java.util.ArrayList;

import java.util.List;

public class MaxNumberUsingStream {

    public static void main(String[] args) {

        List<Integer> numbers = new ArrayList<>();

        numbers.add(10);

        numbers.add(20);

        numbers.add(30);

        numbers.add(40);

        numbers.add(50);

        int max = numbers.stream()

                         .mapToInt(Integer::intValue) // convert stream of Integer to IntStream

                         .max()                       // get the maximum value in the stream

                         .orElse(-1);                 // return -1 if the stream is empty

        System.out.println("Maximum number: " + max);

    }

}

[16/02, 17:22] Kr.rohit: import java.util.ArrayList;

import java.util.List;

public class FirstElementUsingStream {

    public static void main(String[] args) {

        List<Integer> numbers = new ArrayList<>();

        numbers.add(10);

        numbers.add(20);

        numbers.add(30);

        numbers.add(40);

        numbers.add(50);

        int first = numbers.stream()

                           .findFirst()  // get the first element of the stream

                           .orElse(-1);  // return -1 if the stream is empty

        System.out.println("First element: " + first);

    }

}






import java.util.Arrays;

import java.util.Random;

import java.util.stream.IntStream;

public class CustomerStreamPerformance {

    private static final int NUM_CUSTOMERS = 10000;

    public static void main(String[] args) {

        Random random = new Random();

        Customer[] customers = new Customer[NUM_CUSTOMERS];

        long start = System.currentTimeMillis();

        // Generate customers using sequential stream

        IntStream.range(0, NUM_CUSTOMERS)

                 .forEach(i -> customers[i] = generateRandomCustomer(random));

        long end = System.currentTimeMillis();

        System.out.println("Time taken (sequential): " + (end - start) + " ms");

        start = System.currentTimeMillis();

        // Generate customers using parallel stream

        IntStream.range(0, NUM_CUSTOMERS)

                 .parallel()

                 .forEach(i -> customers[i] = generateRandomCustomer(random));

        end = System.currentTimeMillis();

        System.out.println("Time taken (parallel): " + (end - start) + " ms");

    }

    private static Customer generateRandomCustomer(Random random) {

        String name = "Customer" + random.nextInt(NUM_CUSTOMERS);

        int age = random.nextInt(100);

        return new Customer(name, age);

    }

}





package DAY_12;
import java.util.List;
import java.util.ListIterator;
import java.util.ArrayList;
import java.util.Iterator;
 public class Main {
 public static void main(String[] args) {
 List<Object> employeeArr = new ArrayList<>();
 employeeArr.add(new Employee(1010, "Rohit", 35000));
 employeeArr.add(new Employee(122, "Sagar", 55000));
 employeeArr.add(new Employee(133, "Priyansh", 6000));
 employeeArr.add(new Employee(154, "Dipayan", 60000));
 System.out.println("a : ");
 System.out.println(employeeArr);
 // b. Removing at a particular Index
 System.out.println("b : "); employeeArr.remove(0);
 System.out.println(employeeArr);
 // c. i.
 System.out.println("c i : ");
 for(int i=0; i< employeeArr.size(); i++)
 System.out.println(employeeArr.get(i));
 // c. ii.
 System.out.println("c ii : "); for(Object emp : 
employeeArr){
 System.out.println(emp);
 }
 // c. iii.
 System.out.println("c iii : ");
 Iterator e = employeeArr.iterator();
 while(e.hasNext())
 System.out.println(e.next());
 ListIterator listEmp = 
employeeArr.listIterator(employeeArr.size());
 System.out.println("c iv : ");
 while(listEmp.hasPrevious())
 System.out.println(listEmp.previous());
 System.out.println("d : ");
 System.out.println(employeeArr);
 Iterator emp1 = employeeArr.iterator();
 while(emp1.hasNext()){
 Employee ob = (Employee) emp1.next();
 System.out.println("Salary : " + ob.getSalary());
 if(ob.getSalary() < 10000) { emp1.remove();
 }
 }
 System.out.println(employeeArr);
 //2.
 System.out.println("2 : ");
 List<Employee> eList = new ArrayList<Employee>();
 eList.add(new Employee(5, "A", 45000));
 eList.add(new Employee(2, "B", 30000));
 eList.add(new Employee(7, "C", 80000));
 Employee ob1 = eList.get(0);
 boolean check = eList.contains(ob1);
 System.out.println(check);
 eList.remove(ob1);
 System.out.println(eList.size());
 }
 }
 
 
 
 
 
 
 
 import java.util.*;

class Employee implements Comparable<Employee> {

    private int id;

    private String name;

    private int salary;

    public Employee(int id, String name, int salary) {

        this.id = id;

        this.name = name;

        this.salary = salary;

    }

    public int getId() {

        return id;

    }

    public String getName() {

        return name;

    }

    public int getSalary() {

        return salary;

    }

    @Override

    public int compareTo(Employee emp) {

        return this.id - emp.getId();

    }

    @Override

    public String toString() {

        return "Employee [id=" + id + ", name=" + name + ", salary=" + salary + "]";

    }

}

public class Main {

    public static void main(String[] args) {

        // 1. 

        TreeSet<Employee> employeeSet = new TreeSet<Employee>();

        employeeSet.add(new Employee(101, "John", 5000));

        employeeSet.add(new Employee(102, "Mike", 10000));

        employeeSet.add(new Employee(103, "Sarah", 15000));

        employeeSet.add(new Employee(104, "David", 20000));

        // a. 

        System.out.println("a : ");

        for (Employee emp : employeeSet) {

            System.out.println(emp);

        }

        // b. 

        System.out.println("b : ");

        Employee[] employeeArr = employeeSet.toArray(new Employee[0]);

        for (int i = 0; i < employeeArr.length; i++) {

            System.out.println(employeeArr[i]);

        }

        // c. 

        // c i.

        System.out.println("c i : ");

        Employee first = employeeSet.first();

        System.out.println(first);

        // c ii.

        System.out.println("c ii : ");

        Employee last = employeeSet.last();

        System.out.println(last);

        // c iii.

        System.out.println("c iii : ");

        Iterator<Employee> e = employeeSet.iterator();

        while (e.hasNext()) {

            System.out.println(e.next());

        }

        // c iv.

        System.out.println("c iv : ");

        ListIterator<Employee> listEmp = new ArrayList<Employee>(employeeSet).listIterator(employeeSet.size());

        while (listEmp.hasPrevious()) {

            System.out.println(listEmp.previous());

        }

        // d.

        System.out.println("d : ");

        System.out.println(employeeSet);

        Iterator<Employee> emp1 = employeeSet.iterator();

        while (emp1.hasNext()) {

            Employee ob = emp1.next();

            System.out.println("Salary : " + ob.getSalary());

            if (ob.getSalary() < 10000) {

                emp1.remove();

            }

        }

        System.out.println(employeeSet);

        // 2.

        System.out.println("2 : ");

        List<Employee> eList = new ArrayList<Employee>();

        eList.add(new Employee(5, "A", 45000));

        eList.add(new Employee(2, "B", 30000));

        eList.add(new Employee(7, "C", 80000));

        Employee ob1 = eList.get(0);

        boolean check = eList.contains(ob1);

        System.out.println(check);

        eList.remove(ob1);

        System.out.println(eList.size());

    }

}







import java.util.*;

class Employee implements Comparable<Employee> {
    private int id;
    private String name;
    private int salary;

    public Employee(int id, String name, int salary) {
        this.id = id;
        this.name = name;
        this.salary = salary;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public int getSalary() {
        return salary;
    }

    @Override
    public int compareTo(Employee emp) {
        return this.id - emp.getId();
    }

    @Override
    public String toString() {
        return "Employee [id=" + id + ", name=" + name + ", salary=" + salary + "]";
    }
}

public class Main {
    public static void main(String[] args) {
        // 1. 
        TreeSet<Employee> employeeSet = new TreeSet<Employee>();
        employeeSet.add(new Employee(101, "John", 5000));
        employeeSet.add(new Employee(102, "Mike", 10000));
        employeeSet.add(new Employee(103, "Sarah", 15000));
        employeeSet.add(new Employee(104, "David", 20000));

        // a. 
        System.out.println("a : ");
        for (Employee emp : employeeSet) {
            System.out.println(emp);
        }

        // b. 
        System.out.println("b : ");
        Employee[] employeeArr = employeeSet.toArray(new Employee[0]);
        for (int i = 0; i < employeeArr.length; i++) {
            System.out.println(employeeArr[i]);
        }

        // c. 
        // c i.
        System.out.println("c i : ");
        Employee first = employeeSet.first();
        System.out.println(first);

        // c ii.
        System.out.println("c ii : ");
        Employee last = employeeSet.last();
        System.out.println(last);

        // c iii.
        System.out.println("c iii : ");
        Iterator<Employee> e = employeeSet.iterator();
        while (e.hasNext()) {
            System.out.println(e.next());
        }

        // c iv.
        System.out.println("c iv : ");
        ListIterator<Employee> listEmp = new ArrayList<Employee>(employeeSet).listIterator(employeeSet.size());
        while (listEmp.hasPrevious()) {
            System.out.println(listEmp.previous());
        }

        // d.
        System.out.println("d : ");
        System.out.println(employeeSet);
        Iterator<Employee> emp1 = employeeSet.iterator();
        while (emp1.hasNext()) {
            Employee ob = emp1.next();
            System.out.println("Salary : " + ob.getSalary());
            if (ob.getSalary() < 10000) {
                emp1.remove();
            }
        }
        System.out.println(employeeSet);

        // 2.
        System.out.println("2 : ");
        List<Employee> eList = new ArrayList<Employee>();
        eList.add(new Employee(5, "A", 45000));
        eList.add(new Employee(2, "B", 30000));
        eList.add(new Employee(7, "C", 80000));
        Employee ob1 = eList.get(0);
        boolean check = eList.contains(ob1);
        System.out.println(check);
        eList.remove(ob1);
        System.out.println(eList.size());
    }
}




package DAY_13;

import java.util.*;

class Employee implements Comparable<Employee> {
    private int id;
    private String name;
    private int salary;

    public Employee(int id, String name, int salary) {
        this.id = id;
        this.name = name;
        this.salary = salary;
    }

    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public int getSalary() {
        return salary;
    }

    @Override
    public int compareTo(Employee emp) {
        return this.id - emp.getId();
    }

    @Override
    public String toString() {
        return "Employee [id=" + id + ", name=" + name + ", salary=" + salary + "]";
    }
}

public class Main1 {
    public static void main(String[] args) {
        // 1.
        TreeSet<Employee> employeeSet = new TreeSet<Employee>();
        employeeSet.add(new Employee(101, "John", 5000));
        employeeSet.add(new Employee(102, "Mike", 10000));
        employeeSet.add(new Employee(103, "Sarah", 15000));
        employeeSet.add(new Employee(104, "David", 20000));

        // a.
        System.out.println("a : ");
        for (Employee emp : employeeSet) {
            System.out.println(emp);
        }
        Iterator<Employee> emp1 = employeeSet.iterator();
        while (emp1.hasNext()) {
            Employee ob = emp1.next();
            System.out.println("Salary : " + ob.getSalary());
            if (ob.getSalary() < 10000) {
                emp1.remove();
            }
        }
    }
}
