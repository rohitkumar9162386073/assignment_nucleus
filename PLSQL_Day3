SET SERVEROUTPUT ON;
Practice 1
• Write a PL/SQL block that takes a department number from a user and
increases the salary of all the employees belonging to the department by
10%. The block should display on the screen how many records are updated.
declare
v_count number;
dept_no_dip number;
begin
dept_no_dip := &n;
 select count(*) into v_count from emp_dip_ where dept_no =
dept_no_dip;
 update emp_dip_ set salary = salary*1.10 where dept_no =
dept_no_dip;
 DBMS_OUTPUT.PUT_LINE('no. of record update : '|| v_count);
end;

Practice 2
• Write a PL/SQL block to display the employee name, salary and their
corresponding grades (by making use of the “salgrade” table) for the
first five employees recorded in the “emp” table by making use of :
• Simple for loop with “EXIT WHEN” condition
DECLARE
 v_count NUMBER := 0; v_ename VARCHAR2(50); v_sal NUMBER;
v_grade NUMBER;
BEGIN
 FOR i IN (SELECT id, name, salary FROM var_emp)
LOOP
v_count := v_count + 1;
v_ename := i.name;
v_sal := i.salary;
 SELECT grade INTO v_grade
 FROM var_grade
 WHERE i.salary BETWEEN low_sal AND high_sal;
 DBMS_OUTPUT.PUT_LINE('Employee name: ' || v_ename || ', Salary: '
|| v_sal || ', Grade: ' || v_grade);
 EXIT WHEN v_count = 5;
 END LOOP;
END;
declare
i integer :=1;
ename varchar2(20);
sal number;
grade number;
begin
 while i<=5 loop
 select name, salary into ename,sal
from var_emp where rownum =1;
select grade into grade from var_grade where salary between
low_sal and high_sal;
 DBMS_OUTPUT.PUT_LINE(ename||' '||sal||' '||grade);
i:= i+1;
end loop;
end;
DECLARE
v_ename VARCHAR2(50);
v_sal NUMBER;
v_grade NUMBER;
CURSOR c_emp IS
 SELECT id, name, salary FROM var_emp;
BEGIN
 FOR i IN var_emp
LOOP
v_ename := i.name;
v_sal := i.salary;
 SELECT grade INTO v_grade FROM var+grade
 WHERE i.salary BETWEEN low_sal AND high_sal;
 DBMS_OUTPUT.PUT_LINE('Employee name: ' || v_ename || ', Salary: '||
v_sal || ', Grade: ' || v_grade);

 EXIT WHEN c_emp%ROWCOUNT = 5;
 END LOOP;
END;


Practice 3
• Write a PL/SQL block that displays names and salaries of all CLERK’s
recorded in the “emp” table by making use of a cursor.
declare
 cursor emp_cursor is
 select name ,salary from var_emp where job ='Clerk';
 emp_record emp_cursor%rowtype;
begin
 open emp_cursor;
loop
 fetch emp_cursor into emp_record;
exit when emp_cursor%notfound;
 DBMS_OUTPUT.PUT_LINE(emp_record.name||'
'||emp_record.salary);
 end loop;
close emp_cursor;
end;

Practice 4
• Write a PL/SQL block that accepts a value of a job from user and
displays the names, department numbers and salaries of the employees from
the “emp” table having that job. The block makes use of a parameterized
cursor. The user input is passed on to the cursor as a parameter.
declare
 cursor emp_cursor(p_job varchar2) is
 select name,dept_no,salary from emp_dip_ where job=p_job;
 emp_name emp_dip_.name%type;
emp_deptno emp_dip_.dept_no%type;
emp_sal emp_dip_.salary%type;
v_job varchar2(20);
begin
v_job :=&n;
 open emp_cursor(v_job);
 loop
 fetch emp_cursor into emp_name, emp_deptno, emp_sal;
 exit when emp_cursor%notfound;
 DBMS_OUTPUT.PUT_LINE(emp_name||' '||emp_sal||' '||emp_deptno);
 end loop;
close emp_cursor;
end;
Practice 5
• Write a PL/SQL block that updates the salaries of the employees as
per the following rules.
• If the job is CLERK and deptno is 10 then increase the salary by
20%
• If the job is MANAGER and deptno is 20 then increase the salary by
5% • For all the other cases increase the salary by 10% 2/3 The block
makes use of a cursor for performing the updates and ensures that the
appropriate locks are taken on the data retrieved by the cursor, as the
data is to be updated.
declare
cursor c_emp is
 select name,job,dept_no,salary from emp_dip_ for update;
v_name varchar(20);
v_job varchar(20);
v_deptno number;
v_sal number;
v_new_sal number;
begin
open c_emp;
loop
 fetch c_emp into v_name,v_job,v_deptno,v_sal;
exit when c_emp%notfound;
 if v_job ='Clerk' and v_deptno =10 then
v_new_sal :=v_sal *1.2;
 elsif v_job ='Manager' and v_deptno =20 then
v_new_sal:=v_sal *1.05;
else
 v_new_sal :=v_sal *1.1;
end if;
update emp_dip_ set salary=v_new_sal
where current of c_emp;
end loop;
close c_emp;
end;

Practise 6
• Write a PL/SQL block that retrieves information from the “dept” and
“emp” table Department Number :10 Department Name : XXXX EMPLOYEE NUMBER
EMPLOYEE NAMESALARY JOB_ID Department Number :20 Department Name : XXXX
EMPLOYEE NUMBER EMPLOYEE NAMESALARY JOB_ID ......and so on for all the
departments recorded in the “dept” table. (Hint : In a loop, use a cursor
to retrieve the deptno and the dname from the DEPT table, pass the deptno
to retrieve the required column values from the “EMP” table, for those
employees who work in that department.) Same using parameterized cursors
declare
cursor dept_cur is
 select deptno, dname from var_depart;
dept_rec dept_cur%rowtype;
 cursor emp_cur(p_deptno number) is
select empno,ename,sal,job from emp_dip
where deptno = p_deptno;
emp_rec emp_cur%rowtype;
begin
open dept_cur;
loop
 fetch dept_cur into dept_rec;
exit when dept_cur%notfound;
 dbms_output.put_line('DEPARTMENT NUMBER :'|| dept_rec.deptno
||'Department Name :'|| dept_rec.dname);
 open emp_cur(dept_rec.deptno);
loop
 fetch emp_cur into emp_rec;
exit when emp_cur%notfound;
 dbms_output.put_line('employee NUMBER :'|| emp_rec.empno
||'employee Name :'|| emp_rec.ename ||'salary : '|| emp_rec.sal ||'JOB ID
: '|| emp_rec.job);
end loop;
close emp_cur;
end loop;
close dept_cur;
end;
Practice 7
• Create a table named MESSAGES (err_message VARCHAR2(250))
• Write a PL/SQL block that accepts a salary value from a user and
displays name of the employee having the salary value, on the screen.
• If the salary entered returns more than one row, handle the exception
with an appropriate Exception handler and insert into the MESSAGES table
the message “ More than one employee with salary of
• If the salary entered does not return any rows, handle the
exception with an appropriate Exception handler and insert into the
MESSAGES table the message “ No employee with salary of < input salary>”
3/3
• If the salary entered returns only one row, insert into the
MESSAGES table the employee’s name
• Handle any other exception with an appropriate Exception handler
and insert into the MESSAGES table the message “ Some other error
occurred”

DECLARE
emp_not_found EXCEPTION;
emp_sal NUMBER;
empno1 NUMBER;
empno2 NUMBER;
BEGIN
 empno1 := &val1;
empno2 := &val2;
 BEGIN
 SELECT salary INTO emp_sal FROM emp WHERE empno = empno1;
 UPDATE emp SET salary = salary * 1.1 WHERE empno = empno1;
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 IF empno2 IS NULL THEN
 RAISE emp_not_found;
 END IF;
END;
 BEGIN
 SELECT salary INTO emp_sal FROM emp WHERE empno = empno2;
 UPDATE emp SET salary = salary * 1.2 WHERE empno = empno2;
EXCEPTION
 WHEN NO_DATA_FOUND THEN
 RAISE emp_not_found;
 END;
 EXCEPTION
 WHEN emp_not_found THEN
 DBMS_OUTPUT.PUT_LINE('Either empno1 or empno2 or both do not
exist in the "emp" table');
END;
Practice 8
• Write a PL/SQL block that accepts all the column values for dept table
as user inputs and inserts a record in the dept table. The block should
give a name DUPLICATE_DEPT to the error for duplicate value of the
primary key, deptno. (Use pragma EXCEPTION_INIT) The block should write a
handler for handling the exception fired when a duplicated value is
entered for deptno. The handler should have code for displaying an
appropriate message on the screen when DUPLICATE_DEPT is fired.
DECLARE
 count_president INTEGER;
DUPLICATE_PRESIDENT EXCEPTION;
BEGIN
 SELECT COUNT(*) INTO count_president
 FROM var_emp
 WHERE job = 'President';
 IF count_president > 1 THEN
 RAISE DUPLICATE_PRESIDENT;
 END IF;
EXCEPTION
 WHEN DUPLICATE_PRESIDENT THEN
 DBMS_OUTPUT.PUT_LINE ('MORE THAN ONE PRESIDENT');
END;
Practice 9
• Write a PL/SQL BLOCK to check for more than one President (Job column)
in the “emp” table. Create a user defined exception named
DUPLICATE_PRESIDENT that should be raised when more than one president is
found in the “emp” table. The block should handle the exception by
displaying a message “MORE THAN ONE PRESIDENT” on the screen.
DECLARE
 DUPLICATE_DEPT EXCEPTION;
 PRAGMA EXCEPTION_INIT (DUPLICATE_DEPT, -00001);
deptno dept.deptno%TYPE;
dname dept.dname%TYPE;
loc dept.loc%TYPE;
BEGIN
deptno:=&val1;
dname:=&val2;
loc:=&val3;
 INSERT INTO dept (deptno, dname, loc)
VALUES (deptno, dname, loc);
 dbms_output.put_line('Record inserted successfully');
 EXCEPTION
 WHEN DUPLICATE_DEPT THEN
 dbms_output.put_line('ERROR: Duplicate department number.
Please try again.');
END;
Practice 10
• Write a PL/SQL block that accepts the employee numbers of two employees
as two user inputs empno1 and empno2. If empno1 exists in the “emp”
table, then the block increases the salary of the employee by 10%. If
empno2 exists in the “emp” table then the block increases his salary by
20%. The block should raise and handle the errors if empno1 or empno2 or
both do not exist, by displaying the appropriate messages. Note that if
empno1 does not exist but empno2 exists then the salary of empno2 must be
increased. Also when both empno1 and empno2 do not exist then the error
must be handled by the block
DECLARE
 salary NUMBER(10,2);
emp_name VARCHAR2(250);
 CURSOR c_salary IS
 SELECT name FROM employees WHERE salary = salary;
v_count NUMBER;
BEGIN
 DBMS_OUTPUT.PUT_LINE('Enter the salary:');
 BEGIN
 ACCEPT salary NUMBER PROMPT 'Salary:';
 OPEN c_salary;
 FETCH c_salary INTO emp_name;
v_count := SQL%ROWCOUNT;
 IF v_count = 1 THEN
 INSERT INTO MESSAGES (err_message) VALUES (emp_name);
ELSIF v_count > 1 THEN
 INSERT INTO MESSAGES (err_message) VALUES ('More than one
employee with salary of ' || salary);
 ELSE
 INSERT INTO MESSAGES (err_message) VALUES ('No employee with
salary of ' || salary);
 END IF;
 CLOSE c_salary;
 EXCEPTION
 WHEN OTHERS THEN
 INSERT INTO MESSAGES (err_message) VALUES ('Some other error
occurred');
END;
END; 
