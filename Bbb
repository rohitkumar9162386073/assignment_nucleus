// Customer.java

public class Customer {
    private String code;
    private String name;
    private String address1;
    private String address2;
    private String email;
    private String date;
    private String contactNumber;
    private String contactPerson;

    public Customer(String code, String name, String address1, String address2, String email, String date, String contactNumber, String contactPerson) {
        this.code = code;
        this.name = name;
        this.address1 = address1;
        this.address2 = address2;
        this.email = email;
        this.date = date;
        this.contactNumber = contactNumber;
        this.contactPerson = contactPerson;
    }

    public String getCode() {
        return code;
    }

    public String getName() {
        return name;
    }

    public String getAddress1() {
        return address1;
    }

    public String getAddress2() {
        return address2;
    }

    public String getEmail() {
        return email;
    }

    public String getDate() {
        return date;
    }

    public String getContactNumber() {
        return contactNumber;
    }

    public String getContactPerson() {
        return contactPerson;
    }
}

// CustomerValidator.java

public interface CustomerValidator {
    boolean isValid(Customer customer);
}

// CustomerCodeValidator.java

public class CustomerCodeValidator implements CustomerValidator {
    private static final Pattern CODE_PATTERN = Pattern.compile("[A-Z]{3}[0-9]{3}");

    @Override
    public boolean isValid(Customer customer) {
        return CODE_PATTERN.matcher(customer.getCode()).matches();
    }
}

// CustomerNameValidator.java

public class CustomerNameValidator implements CustomerValidator {
    private static final Pattern NAME_PATTERN = Pattern.compile("[A-Za-z ]+");

    @Override
    public boolean isValid(Customer customer) {
        return NAME_PATTERN.matcher(customer.getName()).matches();
    }
}

// CustomerAddressValidator.java

public class CustomerAddressValidator implements CustomerValidator {
    private static final Pattern ADDRESS_PATTERN = Pattern.compile("[A-Za-z0-9 ,-]+");

    @Override
    public boolean isValid(Customer customer) {
        return ADDRESS_PATTERN.matcher(customer.getAddress1()).matches() && ADDRESS_PATTERN.matcher(customer.getAddress2()).matches();
    }
}

// CustomerEmailValidator.java

public class CustomerEmailValidator implements CustomerValidator {
    private static final Pattern EMAIL_PATTERN = Pattern.compile("[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}");

    @Override
    public boolean isValid(Customer customer) {
        return EMAIL_PATTERN.matcher(customer.getEmail()).matches();
    }
}

// CustomerDateValidator.java

public class CustomerDateValidator implements CustomerValidator {
    private static final Pattern DATE_PATTERN = Pattern.compile("\\d{4}-\\d{2}-\\d{2}");

    @Override
    public boolean isValid(Customer customer) {
        return DATE_PATTERN.matcher(customer.getDate()).matches();
    }
}

// CustomerContactValidator.java

public class CustomerContactValidator implements CustomerValidator {
    private static final Pattern CONTACT_PATTERN = Pattern.compile("\\d{10}");

    @Override
    public boolean isValid(Customer customer) {
        return CONTACT_PATTERN.matcher(customer.getContactNumber()).matches();
    }
}

// CustomerContactPersonValidator.java

public class CustomerContactPersonValidator implements CustomerValidator {
    private static final Pattern NAME_PATTERN = Pattern.compile("[A-Za-z ]+");

    @Override
    public boolean isValid(Customer customer) {
        return NAME_PATTERN.matcher(customer.getContactPerson()).matches();
    }
}

// Customer














import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

public class CustomerDataProcessor {
    // File path of the input CSV file
    private static final String CSV_FILE_PATH = "customer_data.csv";

    public static void main(String[] args) {
        // Establish database connection
        Connection conn = null;
        try {
            conn = DriverManager.getConnection("jdbc:oracle:thin:@//localhost:1521/XE", "username", "password");
            conn.setAutoCommit(false);

            // Read the CSV file
            BufferedReader reader = new BufferedReader(new FileReader(CSV_FILE_PATH));
            String line = null;
            while ((line = reader.readLine()) != null) {
                // Parse the CSV line into customer fields
                String[] fields = line.split(",");
                String customerCode = fields[0].trim();
                String customerName = fields[1].trim();
                String address1 = fields[2].trim();
                String address2 = fields[3].trim();
                String emailAddress = fields[4].trim();
                String dateStr = fields[5].trim();
                String contactNumber = fields[6].trim();
                String contactPerson = fields[7].trim();

                // Validate the customer data
                if (isValidCustomerData(customerCode, customerName, address1, address2, emailAddress, dateStr, contactNumber, contactPerson)) {
                    // Insert the customer data into the database using DAO pattern
                    CustomerDAO customerDAO = new CustomerDAOImpl(conn);
                    Customer customer = new Customer(customerCode, customerName, address1, address2, emailAddress, dateStr, contactNumber, contactPerson);
                    customerDAO.insertCustomer(customer);
                    System.out.println("Inserted customer: " + customer);
                } else {
                    // Log the validation failure
                    System.out.println("Invalid customer data: " + line);
                }
            }
            reader.close();

            // Commit the database transaction
            conn.commit();
        } catch (SQLException | IOException e) {
            // Rollback the database transaction on error
            if (conn != null) {
                try {
                    conn.rollback();
                } catch (SQLException e1) {
                    e1.printStackTrace();
                }
            }
            e.printStackTrace();
        } finally {
            // Close the database connection
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    // Validation function to check data type and length of each customer field
    private static boolean isValidCustomerData(String customerCode, String customerName, String address1, String address2,
                                               String emailAddress, String dateStr, String contactNumber, String contactPerson) {
        boolean isValid = true;

        // Validate customer code (5-digit alphanumeric)
        if (!customerCode.matches("[A-Za-z0-9]{5}")) {
            isValid = false;
        }

        // Validate customer name (up to 50 characters)
        if (customerName.length() > 50) {
            isValid = false;
        }

        // Validate address1 (up to 100 characters)
        if (address1.length() > 100) {
            isValid = false;
        }

        // Validate address2 (up to 100 characters)
        if (address2.length() > 100) {
            isValid = false;
        }

        // Validate email address (valid email format)
       











import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.List;

public class FileToTableDAO {
    private static final String JDBC_DRIVER = "oracle.jdbc.driver.OracleDriver";
    private static final String DB_URL = "jdbc:oracle:thin:@localhost:1521:XE";
    private static final String USER = "yourusername";
    private static final String PASS = "yourpassword";

    public static void main(String[] args) {
        Connection conn = null;
        BufferedReader br = null;

        try {
            // Register JDBC driver and open connection
            Class.forName(JDBC_DRIVER);
            conn = DriverManager.getConnection(DB_URL, USER, PASS);

            // Read file and insert records into database
            String line;
            br = new BufferedReader(new FileReader("yourfile.txt"));
            UserDao userDao = new UserDaoImpl(conn);

            while ((line = br.readLine()) != null) {
                String[] values = line.split(",");
                User user = new User(values[0], values[1], values[2]);
                userDao.addUser(user);
            }
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Clean up resources
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }
            try {
                if (br != null) {
                    br.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}

interface UserDao {
    public List<User> getAllUsers() throws SQLException;
    public void addUser(User user) throws SQLException;
    public void updateUser(User user) throws SQLException;
    public void deleteUser(int id) throws SQLException;
}

class UserDaoImpl implements UserDao {
    private Connection conn;

    public UserDaoImpl(Connection conn) {
        this.conn = conn;
    }

    @Override
    public List<User> getAllUsers() throws SQLException {
        // Implementation details for retrieving all Users
    }

    @Override
    public void addUser(User user) throws SQLException {
        String sql = "INSERT INTO yourtable (column1, column2, column3) VALUES (?, ?, ?)";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, user.getName());
            stmt.setString(2, user.getEmail());
            stmt.setString(3, user.getPhone());
            stmt.executeUpdate();
        }
    }

    @Override
    public void updateUser(User user) throws SQLException {
        // Implementation details for updating an existing User
    }

    @Override
    public void deleteUser(int id) throws SQLException {
        // Implementation details for deleting a User by id
    }
}

class User {
    private String name;
    private String email;
    private String phone;

    public User(String name, String email, String phone) {
        this.name = name;
        this.email = email;
        this.phone = phone;
    }

    public String getName() {
        return name;
    }

    public String getEmail() {
        return email;
    }

    public String getPhone() {
        return phone;
    }
}
